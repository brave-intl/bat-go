// Code generated by MockGen. DO NOT EDIT.
// Source: ./aws/s3.go

// Package mockaws is a generated GoMock package.
package mockaws

import (
	context "context"
	reflect "reflect"

	s3 "github.com/aws/aws-sdk-go-v2/service/s3"
	gomock "github.com/golang/mock/gomock"
)

// MockS3GetObjectAPI is a mock of S3GetObjectAPI interface.
type MockS3GetObjectAPI struct {
	ctrl     *gomock.Controller
	recorder *MockS3GetObjectAPIMockRecorder
}

// MockS3GetObjectAPIMockRecorder is the mock recorder for MockS3GetObjectAPI.
type MockS3GetObjectAPIMockRecorder struct {
	mock *MockS3GetObjectAPI
}

// NewMockS3GetObjectAPI creates a new mock instance.
func NewMockS3GetObjectAPI(ctrl *gomock.Controller) *MockS3GetObjectAPI {
	mock := &MockS3GetObjectAPI{ctrl: ctrl}
	mock.recorder = &MockS3GetObjectAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3GetObjectAPI) EXPECT() *MockS3GetObjectAPIMockRecorder {
	return m.recorder
}

// GetObject mocks base method.
func (m *MockS3GetObjectAPI) GetObject(ctx context.Context, params *s3.GetObjectInput, optFns ...func(*s3.Options)) (*s3.GetObjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetObject", varargs...)
	ret0, _ := ret[0].(*s3.GetObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject.
func (mr *MockS3GetObjectAPIMockRecorder) GetObject(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockS3GetObjectAPI)(nil).GetObject), varargs...)
}
