// Code generated by MockGen. DO NOT EDIT.
// Source: ./backoff/retrypolicy/retrypolicy.go

// Package mockretrypolicy is a generated GoMock package.
package mockretrypolicy

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockRetry is a mock of Retry interface.
type MockRetry struct {
	ctrl     *gomock.Controller
	recorder *MockRetryMockRecorder
}

// MockRetryMockRecorder is the mock recorder for MockRetry.
type MockRetryMockRecorder struct {
	mock *MockRetry
}

// NewMockRetry creates a new mock instance.
func NewMockRetry(ctrl *gomock.Controller) *MockRetry {
	mock := &MockRetry{ctrl: ctrl}
	mock.recorder = &MockRetryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRetry) EXPECT() *MockRetryMockRecorder {
	return m.recorder
}

// CalculateNextDelay mocks base method.
func (m *MockRetry) CalculateNextDelay() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateNextDelay")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// CalculateNextDelay indicates an expected call of CalculateNextDelay.
func (mr *MockRetryMockRecorder) CalculateNextDelay() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateNextDelay", reflect.TypeOf((*MockRetry)(nil).CalculateNextDelay))
}
