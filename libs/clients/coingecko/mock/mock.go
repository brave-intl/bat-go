// Code generated by MockGen. DO NOT EDIT.
// Source: ./libs/clients/coingecko/client.go

// Package mock_coingecko is a generated GoMock package.
package mock_coingecko

import (
	context "context"
	reflect "reflect"
	time "time"

	coingecko "github.com/brave-intl/bat-go/libs/clients/coingecko"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// FetchCoinList mocks base method.
func (m *MockClient) FetchCoinList(ctx context.Context, includePlatform bool) (*coingecko.CoinListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCoinList", ctx, includePlatform)
	ret0, _ := ret[0].(*coingecko.CoinListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCoinList indicates an expected call of FetchCoinList.
func (mr *MockClientMockRecorder) FetchCoinList(ctx, includePlatform interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCoinList", reflect.TypeOf((*MockClient)(nil).FetchCoinList), ctx, includePlatform)
}

// FetchCoinMarkets mocks base method.
func (m *MockClient) FetchCoinMarkets(ctx context.Context, vsCurrency string, limit int) (*coingecko.CoinMarketResponse, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCoinMarkets", ctx, vsCurrency, limit)
	ret0, _ := ret[0].(*coingecko.CoinMarketResponse)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchCoinMarkets indicates an expected call of FetchCoinMarkets.
func (mr *MockClientMockRecorder) FetchCoinMarkets(ctx, vsCurrency, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCoinMarkets", reflect.TypeOf((*MockClient)(nil).FetchCoinMarkets), ctx, vsCurrency, limit)
}

// FetchMarketChart mocks base method.
func (m *MockClient) FetchMarketChart(ctx context.Context, id, vsCurrency string, days float32) (*coingecko.MarketChartResponse, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMarketChart", ctx, id, vsCurrency, days)
	ret0, _ := ret[0].(*coingecko.MarketChartResponse)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchMarketChart indicates an expected call of FetchMarketChart.
func (mr *MockClientMockRecorder) FetchMarketChart(ctx, id, vsCurrency, days interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMarketChart", reflect.TypeOf((*MockClient)(nil).FetchMarketChart), ctx, id, vsCurrency, days)
}

// FetchSimplePrice mocks base method.
func (m *MockClient) FetchSimplePrice(ctx context.Context, ids, vsCurrencies string, include24hrChange bool) (*coingecko.SimplePriceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSimplePrice", ctx, ids, vsCurrencies, include24hrChange)
	ret0, _ := ret[0].(*coingecko.SimplePriceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSimplePrice indicates an expected call of FetchSimplePrice.
func (mr *MockClientMockRecorder) FetchSimplePrice(ctx, ids, vsCurrencies, include24hrChange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSimplePrice", reflect.TypeOf((*MockClient)(nil).FetchSimplePrice), ctx, ids, vsCurrencies, include24hrChange)
}

// FetchSupportedVsCurrencies mocks base method.
func (m *MockClient) FetchSupportedVsCurrencies(ctx context.Context) (*coingecko.SupportedVsCurrenciesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSupportedVsCurrencies", ctx)
	ret0, _ := ret[0].(*coingecko.SupportedVsCurrenciesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSupportedVsCurrencies indicates an expected call of FetchSupportedVsCurrencies.
func (mr *MockClientMockRecorder) FetchSupportedVsCurrencies(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSupportedVsCurrencies", reflect.TypeOf((*MockClient)(nil).FetchSupportedVsCurrencies), ctx)
}
