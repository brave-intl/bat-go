// Code generated by MockGen. DO NOT EDIT.
// Source: ./libs/clients/bitflyer/client.go

// Package mock_bitflyer is a generated GoMock package.
package mock_bitflyer

import (
	context "context"
	reflect "reflect"

	bitflyer "github.com/brave-intl/bat-go/libs/clients/bitflyer"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CheckInventory mocks base method.
func (m *MockClient) CheckInventory(ctx context.Context) (map[string]bitflyer.Inventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckInventory", ctx)
	ret0, _ := ret[0].(map[string]bitflyer.Inventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckInventory indicates an expected call of CheckInventory.
func (mr *MockClientMockRecorder) CheckInventory(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckInventory", reflect.TypeOf((*MockClient)(nil).CheckInventory), ctx)
}

// CheckPayoutStatus mocks base method.
func (m *MockClient) CheckPayoutStatus(ctx context.Context, payload bitflyer.CheckBulkStatusPayload) (*bitflyer.WithdrawToDepositIDBulkResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPayoutStatus", ctx, payload)
	ret0, _ := ret[0].(*bitflyer.WithdrawToDepositIDBulkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPayoutStatus indicates an expected call of CheckPayoutStatus.
func (mr *MockClientMockRecorder) CheckPayoutStatus(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPayoutStatus", reflect.TypeOf((*MockClient)(nil).CheckPayoutStatus), ctx, payload)
}

// FetchBalance mocks base method.
func (m *MockClient) FetchBalance(ctx context.Context) (*bitflyer.InventoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchBalance", ctx)
	ret0, _ := ret[0].(*bitflyer.InventoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchBalance indicates an expected call of FetchBalance.
func (mr *MockClientMockRecorder) FetchBalance(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchBalance", reflect.TypeOf((*MockClient)(nil).FetchBalance), ctx)
}

// FetchQuote mocks base method.
func (m *MockClient) FetchQuote(ctx context.Context, productCode string, readFromFile bool) (*bitflyer.Quote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchQuote", ctx, productCode, readFromFile)
	ret0, _ := ret[0].(*bitflyer.Quote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchQuote indicates an expected call of FetchQuote.
func (mr *MockClientMockRecorder) FetchQuote(ctx, productCode, readFromFile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchQuote", reflect.TypeOf((*MockClient)(nil).FetchQuote), ctx, productCode, readFromFile)
}

// RefreshToken mocks base method.
func (m *MockClient) RefreshToken(ctx context.Context, payload bitflyer.TokenPayload) (*bitflyer.TokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", ctx, payload)
	ret0, _ := ret[0].(*bitflyer.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockClientMockRecorder) RefreshToken(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockClient)(nil).RefreshToken), ctx, payload)
}

// SetAuthToken mocks base method.
func (m *MockClient) SetAuthToken(authToken string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAuthToken", authToken)
}

// SetAuthToken indicates an expected call of SetAuthToken.
func (mr *MockClientMockRecorder) SetAuthToken(authToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAuthToken", reflect.TypeOf((*MockClient)(nil).SetAuthToken), authToken)
}

// UploadBulkPayout mocks base method.
func (m *MockClient) UploadBulkPayout(ctx context.Context, payload bitflyer.WithdrawToDepositIDBulkPayload) (*bitflyer.WithdrawToDepositIDBulkResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadBulkPayout", ctx, payload)
	ret0, _ := ret[0].(*bitflyer.WithdrawToDepositIDBulkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadBulkPayout indicates an expected call of UploadBulkPayout.
func (mr *MockClientMockRecorder) UploadBulkPayout(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadBulkPayout", reflect.TypeOf((*MockClient)(nil).UploadBulkPayout), ctx, payload)
}
