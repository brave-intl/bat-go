// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients/gemini/client.go

// Package mock_gemini is a generated GoMock package.
package mock_gemini

import (
	context "context"
	reflect "reflect"

	gemini "github.com/brave-intl/bat-go/libs/clients/gemini"
	cryptography "github.com/brave-intl/bat-go/libs/cryptography"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CheckTxStatus mocks base method.
func (m *MockClient) CheckTxStatus(ctx context.Context, APIKEY, clientID, txRef string) (*gemini.PayoutResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTxStatus", ctx, APIKEY, clientID, txRef)
	ret0, _ := ret[0].(*gemini.PayoutResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTxStatus indicates an expected call of CheckTxStatus.
func (mr *MockClientMockRecorder) CheckTxStatus(ctx, APIKEY, clientID, txRef interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTxStatus", reflect.TypeOf((*MockClient)(nil).CheckTxStatus), ctx, APIKEY, clientID, txRef)
}

// FetchAccountList mocks base method.
func (m *MockClient) FetchAccountList(ctx context.Context, APIKey string, signer cryptography.HMACKey, payload string) (*[]gemini.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAccountList", ctx, APIKey, signer, payload)
	ret0, _ := ret[0].(*[]gemini.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAccountList indicates an expected call of FetchAccountList.
func (mr *MockClientMockRecorder) FetchAccountList(ctx, APIKey, signer, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAccountList", reflect.TypeOf((*MockClient)(nil).FetchAccountList), ctx, APIKey, signer, payload)
}

// FetchBalances mocks base method.
func (m *MockClient) FetchBalances(ctx context.Context, APIKey string, signer cryptography.HMACKey, payload string) (*[]gemini.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchBalances", ctx, APIKey, signer, payload)
	ret0, _ := ret[0].(*[]gemini.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchBalances indicates an expected call of FetchBalances.
func (mr *MockClientMockRecorder) FetchBalances(ctx, APIKey, signer, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchBalances", reflect.TypeOf((*MockClient)(nil).FetchBalances), ctx, APIKey, signer, payload)
}

// FetchValidateAccount mocks base method.
func (m *MockClient) FetchValidatedAccount(ctx context.Context, verificationToken, recipientID string) (gemini.ValidatedAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchValidatedAccount", ctx, verificationToken, recipientID)
	ret0, _ := ret[0].(gemini.ValidatedAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchValidateAccount indicates an expected call of FetchValidateAccount.
func (mr *MockClientMockRecorder) FetchValidateAccount(ctx, verificationToken, recipientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchValidatedAccount", reflect.TypeOf((*MockClient)(nil).FetchValidatedAccount), ctx, verificationToken, recipientID)
}

// UploadBulkPayout mocks base method.
func (m *MockClient) UploadBulkPayout(ctx context.Context, APIKey string, signer cryptography.HMACKey, payload string) (*[]gemini.PayoutResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadBulkPayout", ctx, APIKey, signer, payload)
	ret0, _ := ret[0].(*[]gemini.PayoutResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadBulkPayout indicates an expected call of UploadBulkPayout.
func (mr *MockClientMockRecorder) UploadBulkPayout(ctx, APIKey, signer, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadBulkPayout", reflect.TypeOf((*MockClient)(nil).UploadBulkPayout), ctx, APIKey, signer, payload)
}
