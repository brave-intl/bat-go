// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients/zebpay/client.go

// Package mock_zebpay is a generated GoMock package.
package mock_zebpay

import (
	context "context"
	reflect "reflect"

	zebpay "github.com/brave-intl/bat-go/libs/clients/zebpay"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// BulkCheckTransfer mocks base method.
func (m *MockClient) BulkCheckTransfer(ctx context.Context, opts *zebpay.ClientOpts, ids ...uuid.UUID) (zebpay.BulkCheckTransferResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, opts}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BulkCheckTransfer", varargs...)
	ret0, _ := ret[0].(zebpay.BulkCheckTransferResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkCheckTransfer indicates an expected call of BulkCheckTransfer.
func (mr *MockClientMockRecorder) BulkCheckTransfer(ctx, opts interface{}, ids ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, opts}, ids...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkCheckTransfer", reflect.TypeOf((*MockClient)(nil).BulkCheckTransfer), varargs...)
}

// BulkTransfer mocks base method.
func (m *MockClient) BulkTransfer(ctx context.Context, opts *zebpay.ClientOpts, req zebpay.BulkTransferRequest) (*zebpay.BulkTransferResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkTransfer", ctx, opts, req)
	ret0, _ := ret[0].(*zebpay.BulkTransferResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkTransfer indicates an expected call of BulkTransfer.
func (mr *MockClientMockRecorder) BulkTransfer(ctx, opts, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkTransfer", reflect.TypeOf((*MockClient)(nil).BulkTransfer), ctx, opts, req)
}

// CheckTransfer mocks base method.
func (m *MockClient) CheckTransfer(ctx context.Context, opts *zebpay.ClientOpts, id uuid.UUID) (*zebpay.CheckTransferResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTransfer", ctx, opts, id)
	ret0, _ := ret[0].(*zebpay.CheckTransferResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTransfer indicates an expected call of CheckTransfer.
func (mr *MockClientMockRecorder) CheckTransfer(ctx, opts, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTransfer", reflect.TypeOf((*MockClient)(nil).CheckTransfer), ctx, opts, id)
}
