package nitro

import (
	"crypto/x509"
	"encoding/base64"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestDecrypt(t *testing.T) {
	keyb64 := "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"
	ciphertextb64 := "MIAGCSqGSIb3DQEHA6CAMIACAQIxggJrMIICZwIBAoAg4AcF3YTmZkRYgglEmGNb2FwLdoccNa8MvC9FpfUihtcwPAYJKoZIhvcNAQEHMC+gDzANBglghkgBZQMEAgEFAKEcMBoGCSqGSIb3DQEBCDANBglghkgBZQMEAgEFAASCAgBKgUw9pm3a76LO6vjUHfEocy5u8b3X6Zu37hGH/amHL1szxcAiJ7bCAF7kWWlCp2FxRDjVn/rFd3cfVwhUu2T8FMyMBvE/avPpoYo/nEGcP2MZtDhu27aYZdObEFgAF/EpRK5PPVwhGfFqpkn7h0vzH1it+iOTSewSLYOP2q0U1qTFL0G9b/cL9SQIE7Ym15l8kqU2ZC/f6fLcIUdeKRMnDeQveOjv1ASj+cqs2KLGqp8CMoX0ds3MTHs8VadM5qzz40J/2uJHEpGeXis2c1jayPoTtCc5p5PtkoamrPEbbkvbSj1WrkiCQjz5iLXuIK9GQrFo/OXv6u+qM8Fv6VJugjhlvs8/1ugJnSmK/1eDTBURMiQOv8t6G0nLQw26tXiDxwiF+lSQ+VcT9R23+jMdtFyOsjI6VpjQJiXpv8iuIOnesxben0PBz1nPg4dlCKpd8w8x6yaM3ckfYp3MADryYY3j42FggYiF9J8yryf8ah15jVBRi0NRplH7jtmJK5vqKFFBaERSMBxb9/DpZvgosQ4LO7XoCKkP2mZ9Vnb3SOzsqPP+ZesSS+EE9FZAm8BKcKqc5RXqn1loHUOtg2Q5lMPF5DdL4TJvxFvM7EuRrt3Ox2moHHaAGR6MeOG2mP70GA57thl66Y7ewBYv/elV+TAvNS3QvKNuBZkHi9o73jCABgkqhkiG9w0BBwEwHQYJYIZIAWUDBAEqBBD+sYJrxYPmjywuDomBc195oIAEgeDbFf8PNscwluAONk2Qk9acZsnj1kE8rbUOsiRBnI099DYG702V4swiB+Xfu9P34jRqGT2h65oDoMg8uUwpDP9FEkhpwXYxiopxEeFyNw9KHoTda9vWdy1/OtWVltG3hatJ/mvtog0n7XwqqWaTPTiqYxhkI5NPz2NyrbCuhWbj6r+1cHa2ecSKMrSkr+SjN4ZwA59Gdhd/NT9iE2e2Q0umpowsO5w34zUIlwrVK5RtThlf0SXCKqMeqgKAFd+SLnYc8dBnEFCiwJxTM5qhq61JvarpB6I0dj2jjtBfEUyxmgAAAAAAAAAAAAA="
	expected := []byte{97, 103, 101, 45, 101, 110, 99, 114, 121, 112, 116, 105, 111, 110, 46, 111, 114, 103, 47, 118, 49, 10, 45, 62, 32, 88, 50, 53, 53, 49, 57, 32, 55, 88, 68, 79, 110, 113, 88, 90, 51, 76, 50, 100, 79, 52, 57, 98, 81, 107, 79, 50, 71, 65, 56, 104, 111, 85, 76, 102, 67, 110, 106, 86, 87, 90, 111, 109, 57, 84, 106, 53, 72, 48, 81, 10, 119, 78, 88, 53, 84, 117, 111, 98, 101, 87, 100, 76, 110, 43, 106, 51, 100, 103, 109, 76, 55, 119, 66, 69, 49, 118, 48, 71, 107, 120, 90, 80, 76, 57, 51, 112, 57, 71, 78, 54, 110, 67, 65, 10, 45, 45, 45, 32, 112, 82, 53, 102, 43, 115, 103, 100, 98, 98, 114, 115, 105, 105, 81, 97, 114, 120, 84, 90, 103, 54, 66, 55, 98, 55, 52, 90, 67, 98, 122, 74, 100, 70, 81, 55, 113, 86, 112, 74, 112, 105, 48, 10, 188, 113, 21, 3, 248, 234, 246, 179, 182, 95, 81, 165, 193, 135, 15, 101, 18, 250, 86, 162, 255, 241, 196, 59, 143, 241, 91, 61, 150, 30, 158, 239, 180, 108, 91, 206, 23, 87, 34, 229, 132, 128, 95, 128, 253, 178, 21, 16, 202, 113, 198, 142, 232, 137, 86}

	keybytes, err := base64.StdEncoding.DecodeString(keyb64)
	if err != nil {
		t.Error("failed to b64decode RSA key")
	}
	key, err := x509.ParsePKCS1PrivateKey(keybytes)
	if err != nil {
		t.Error("failed to PKCS decode RSA key")
	}

	ciphertext, err := base64.StdEncoding.DecodeString(ciphertextb64)
	if err != nil {
		t.Error("failed to b64decode ciphertext")
	}

	plaintext, err := Decrypt(key, ciphertext)
	if err != nil {
		t.Error("failed to decrypt ciphertext", err)
	}

	assert.Equal(t, expected, plaintext, "failed to decrypt ciphertext, plaintext did not match")
}
