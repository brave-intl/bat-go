package rewards

import (
	"context"
	"errors"
	"fmt"
	"strings"
)

// BaseCurrency - type for base currency input
type BaseCurrency string

// String - stringer implmentation
func (rbc *BaseCurrency) String() string {
	return string(*rbc)
}

var (
	validCurrencies = map[string]bool{
		"AED":   true,
		"AFN":   true,
		"ALL":   true,
		"AMD":   true,
		"ANG":   true,
		"AOA":   true,
		"ARS":   true,
		"AUD":   true,
		"AWG":   true,
		"AZN":   true,
		"BAM":   true,
		"BBD":   true,
		"BDT":   true,
		"BGN":   true,
		"BHD":   true,
		"BIF":   true,
		"BMD":   true,
		"BND":   true,
		"BOB":   true,
		"BRL":   true,
		"BSD":   true,
		"BTC":   true,
		"BTN":   true,
		"BWP":   true,
		"BYN":   true,
		"BZD":   true,
		"CAD":   true,
		"CDF":   true,
		"CHF":   true,
		"CLF":   true,
		"CLP":   true,
		"CNH":   true,
		"CNY":   true,
		"COP":   true,
		"CRC":   true,
		"CUC":   true,
		"CUP":   true,
		"CVE":   true,
		"CZK":   true,
		"DJF":   true,
		"DKK":   true,
		"DOP":   true,
		"DZD":   true,
		"EGP":   true,
		"ERN":   true,
		"ETB":   true,
		"EUR":   true,
		"FJD":   true,
		"FKP":   true,
		"GBP":   true,
		"GEL":   true,
		"GGP":   true,
		"GHS":   true,
		"GIP":   true,
		"GMD":   true,
		"GNF":   true,
		"GTQ":   true,
		"GYD":   true,
		"HKD":   true,
		"HNL":   true,
		"HRK":   true,
		"HTG":   true,
		"HUF":   true,
		"IDR":   true,
		"ILS":   true,
		"IMP":   true,
		"INR":   true,
		"IQD":   true,
		"IRR":   true,
		"ISK":   true,
		"JEP":   true,
		"JMD":   true,
		"JOD":   true,
		"JPY":   true,
		"KES":   true,
		"KGS":   true,
		"KHR":   true,
		"KMF":   true,
		"KPW":   true,
		"KRW":   true,
		"KWD":   true,
		"KYD":   true,
		"KZT":   true,
		"LAK":   true,
		"LBP":   true,
		"LKR":   true,
		"LRD":   true,
		"LSL":   true,
		"LYD":   true,
		"MAD":   true,
		"MDL":   true,
		"MGA":   true,
		"MKD":   true,
		"MMK":   true,
		"MNT":   true,
		"MOP":   true,
		"MRO":   true,
		"MRU":   true,
		"MUR":   true,
		"MVR":   true,
		"MWK":   true,
		"MXN":   true,
		"MYR":   true,
		"MZN":   true,
		"NAD":   true,
		"NGN":   true,
		"NIO":   true,
		"NOK":   true,
		"NPR":   true,
		"NZD":   true,
		"OMR":   true,
		"PAB":   true,
		"PEN":   true,
		"PGK":   true,
		"PHP":   true,
		"PKR":   true,
		"PLN":   true,
		"PYG":   true,
		"QAR":   true,
		"RON":   true,
		"RSD":   true,
		"RUB":   true,
		"RWF":   true,
		"SAR":   true,
		"SBD":   true,
		"SCR":   true,
		"SDG":   true,
		"SEK":   true,
		"SGD":   true,
		"SHP":   true,
		"SLL":   true,
		"SOS":   true,
		"SRD":   true,
		"SSP":   true,
		"STD":   true,
		"STN":   true,
		"SVC":   true,
		"SYP":   true,
		"SZL":   true,
		"THB":   true,
		"TJS":   true,
		"TMT":   true,
		"TND":   true,
		"TOP":   true,
		"TRY":   true,
		"TTD":   true,
		"TWD":   true,
		"TZS":   true,
		"UAH":   true,
		"UGX":   true,
		"USD":   true,
		"UYU":   true,
		"UZS":   true,
		"VEF":   true,
		"VES":   true,
		"VND":   true,
		"VUV":   true,
		"WST":   true,
		"XAF":   true,
		"XAG":   true,
		"XAU":   true,
		"XCD":   true,
		"XDR":   true,
		"XOF":   true,
		"XPD":   true,
		"XPF":   true,
		"XPT":   true,
		"YER":   true,
		"ZAR":   true,
		"ZMW":   true,
		"ZWL":   true,
		"ADA":   true,
		"ATOM":  true,
		"BAT":   true,
		"BCH":   true,
		"BTG":   true,
		"-DAI":  true,
		"DASH":  true,
		"DCR":   true,
		"DGB":   true,
		"DOGE":  true,
		"EOS":   true,
		"ETH":   true,
		"IOTA":  true,
		"LBA":   true,
		"LINK":  true,
		"LTC":   true,
		"NANO":  true,
		"NEO":   true,
		"OMG":   true,
		"STORM": true,
		"TRX":   true,
		"-TUSD": true,
		"UPBTC": true,
		"UPEUR": true,
		"UPT":   true,
		"UPUSD": true,
		"-USDC": true,
		"-USDT": true,
		"VOX":   true,
		"XEM":   true,
		"XLM":   true,
		"XRP":   true,
		"ZIL":   true,
		"ZRX":   true,
		"BCC":   true,
	}
)

var (
	// ErrBaseCurrencyEmpty - empty base currency
	ErrBaseCurrencyEmpty = errors.New("currency cannot be empty")
	// ErrBaseCurrencyInvalid - indicates there is a validation issue with the currency
	ErrBaseCurrencyInvalid = errors.New("invalid currency")
)

// Decode - implement decodable
func (rbc *BaseCurrency) Decode(ctx context.Context, v []byte) error {
	s := string(v)
	if s == "" {
		return ErrBaseCurrencyEmpty
	}
	*rbc = BaseCurrency(strings.ToUpper(s))
	return nil
}

// Validate - implement validatable
func (rbc *BaseCurrency) Validate(ctx context.Context) error {
	if validCurrencies[rbc.String()] {
		return nil
	}
	return fmt.Errorf("%w: %s is not valid", ErrBaseCurrencyInvalid, rbc.String())
}
