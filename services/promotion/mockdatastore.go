// Code generated by MockGen. DO NOT EDIT.
// Source: ./promotion/datastore.go

// Package promotion is a generated GoMock package.
package promotion

import (
	context "context"
	reflect "reflect"

	cbr "github.com/brave-intl/bat-go/libs/clients/cbr"
	jsonutils "github.com/brave-intl/bat-go/libs/jsonutils"
	wallet "github.com/brave-intl/bat-go/libs/wallet"
	v4 "github.com/golang-migrate/migrate/v4"
	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
	go_uuid "github.com/satori/go.uuid"
	decimal "github.com/shopspring/decimal"
)

// MockDatastore is a mock of Datastore interface.
type MockDatastore struct {
	ctrl     *gomock.Controller
	recorder *MockDatastoreMockRecorder
}

// MockDatastoreMockRecorder is the mock recorder for MockDatastore.
type MockDatastoreMockRecorder struct {
	mock *MockDatastore
}

// NewMockDatastore creates a new mock instance.
func NewMockDatastore(ctrl *gomock.Controller) *MockDatastore {
	mock := &MockDatastore{ctrl: ctrl}
	mock.recorder = &MockDatastoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatastore) EXPECT() *MockDatastoreMockRecorder {
	return m.recorder
}

// ActivatePromotion mocks base method.
func (m *MockDatastore) ActivatePromotion(promotion *Promotion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivatePromotion", promotion)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivatePromotion indicates an expected call of ActivatePromotion.
func (mr *MockDatastoreMockRecorder) ActivatePromotion(promotion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivatePromotion", reflect.TypeOf((*MockDatastore)(nil).ActivatePromotion), promotion)
}

// BeginTx mocks base method.
func (m *MockDatastore) BeginTx() (*sqlx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx")
	ret0, _ := ret[0].(*sqlx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockDatastoreMockRecorder) BeginTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockDatastore)(nil).BeginTx))
}

// ClaimForWallet mocks base method.
func (m *MockDatastore) ClaimForWallet(promotion *Promotion, issuer *Issuer, wallet *wallet.Info, blindedCreds jsonutils.JSONStringArray) (*Claim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClaimForWallet", promotion, issuer, wallet, blindedCreds)
	ret0, _ := ret[0].(*Claim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClaimForWallet indicates an expected call of ClaimForWallet.
func (mr *MockDatastoreMockRecorder) ClaimForWallet(promotion, issuer, wallet, blindedCreds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClaimForWallet", reflect.TypeOf((*MockDatastore)(nil).ClaimForWallet), promotion, issuer, wallet, blindedCreds)
}

// CreateClaim mocks base method.
func (m *MockDatastore) CreateClaim(promotionID go_uuid.UUID, walletID string, value, bonus decimal.Decimal, legacy bool) (*Claim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClaim", promotionID, walletID, value, bonus, legacy)
	ret0, _ := ret[0].(*Claim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClaim indicates an expected call of CreateClaim.
func (mr *MockDatastoreMockRecorder) CreateClaim(promotionID, walletID, value, bonus, legacy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClaim", reflect.TypeOf((*MockDatastore)(nil).CreateClaim), promotionID, walletID, value, bonus, legacy)
}

// CreatePromotion mocks base method.
func (m *MockDatastore) CreatePromotion(promotionType string, numGrants int, value decimal.Decimal, platform string) (*Promotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePromotion", promotionType, numGrants, value, platform)
	ret0, _ := ret[0].(*Promotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePromotion indicates an expected call of CreatePromotion.
func (mr *MockDatastoreMockRecorder) CreatePromotion(promotionType, numGrants, value, platform interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePromotion", reflect.TypeOf((*MockDatastore)(nil).CreatePromotion), promotionType, numGrants, value, platform)
}

// CreateTransaction mocks base method.
func (m *MockDatastore) CreateTransaction(orderID go_uuid.UUID, externalTransactionID, status, currency, kind string, amount decimal.Decimal) (*Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", orderID, externalTransactionID, status, currency, kind, amount)
	ret0, _ := ret[0].(*Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockDatastoreMockRecorder) CreateTransaction(orderID, externalTransactionID, status, currency, kind, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockDatastore)(nil).CreateTransaction), orderID, externalTransactionID, status, currency, kind, amount)
}

// DeactivatePromotion mocks base method.
func (m *MockDatastore) DeactivatePromotion(promotion *Promotion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivatePromotion", promotion)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivatePromotion indicates an expected call of DeactivatePromotion.
func (mr *MockDatastoreMockRecorder) DeactivatePromotion(promotion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivatePromotion", reflect.TypeOf((*MockDatastore)(nil).DeactivatePromotion), promotion)
}

// GetAvailablePromotions mocks base method.
func (m *MockDatastore) GetAvailablePromotions(platform string) ([]Promotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailablePromotions", platform)
	ret0, _ := ret[0].([]Promotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailablePromotions indicates an expected call of GetAvailablePromotions.
func (mr *MockDatastoreMockRecorder) GetAvailablePromotions(platform interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailablePromotions", reflect.TypeOf((*MockDatastore)(nil).GetAvailablePromotions), platform)
}

// GetAvailablePromotionsForWallet mocks base method.
func (m *MockDatastore) GetAvailablePromotionsForWallet(wallet *wallet.Info, platform string) ([]Promotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailablePromotionsForWallet", wallet, platform)
	ret0, _ := ret[0].([]Promotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailablePromotionsForWallet indicates an expected call of GetAvailablePromotionsForWallet.
func (mr *MockDatastoreMockRecorder) GetAvailablePromotionsForWallet(wallet, platform interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailablePromotionsForWallet", reflect.TypeOf((*MockDatastore)(nil).GetAvailablePromotionsForWallet), wallet, platform)
}

// GetClaimByWalletAndPromotion mocks base method.
func (m *MockDatastore) GetClaimByWalletAndPromotion(wallet *wallet.Info, promotionID *Promotion) (*Claim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaimByWalletAndPromotion", wallet, promotionID)
	ret0, _ := ret[0].(*Claim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClaimByWalletAndPromotion indicates an expected call of GetClaimByWalletAndPromotion.
func (mr *MockDatastoreMockRecorder) GetClaimByWalletAndPromotion(wallet, promotionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaimByWalletAndPromotion", reflect.TypeOf((*MockDatastore)(nil).GetClaimByWalletAndPromotion), wallet, promotionID)
}

// GetClaimCreds mocks base method.
func (m *MockDatastore) GetClaimCreds(claimID go_uuid.UUID) (*ClaimCreds, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaimCreds", claimID)
	ret0, _ := ret[0].(*ClaimCreds)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClaimCreds indicates an expected call of GetClaimCreds.
func (mr *MockDatastoreMockRecorder) GetClaimCreds(claimID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaimCreds", reflect.TypeOf((*MockDatastore)(nil).GetClaimCreds), claimID)
}

// GetClaimSummary mocks base method.
func (m *MockDatastore) GetClaimSummary(walletID go_uuid.UUID, grantType string) (*ClaimSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaimSummary", walletID, grantType)
	ret0, _ := ret[0].(*ClaimSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClaimSummary indicates an expected call of GetClaimSummary.
func (mr *MockDatastoreMockRecorder) GetClaimSummary(walletID, grantType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaimSummary", reflect.TypeOf((*MockDatastore)(nil).GetClaimSummary), walletID, grantType)
}

// GetIssuer mocks base method.
func (m *MockDatastore) GetIssuer(promotionID go_uuid.UUID, cohort string) (*Issuer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuer", promotionID, cohort)
	ret0, _ := ret[0].(*Issuer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssuer indicates an expected call of GetIssuer.
func (mr *MockDatastoreMockRecorder) GetIssuer(promotionID, cohort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuer", reflect.TypeOf((*MockDatastore)(nil).GetIssuer), promotionID, cohort)
}

// GetIssuerByPublicKey mocks base method.
func (m *MockDatastore) GetIssuerByPublicKey(publicKey string) (*Issuer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuerByPublicKey", publicKey)
	ret0, _ := ret[0].(*Issuer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssuerByPublicKey indicates an expected call of GetIssuerByPublicKey.
func (mr *MockDatastoreMockRecorder) GetIssuerByPublicKey(publicKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuerByPublicKey", reflect.TypeOf((*MockDatastore)(nil).GetIssuerByPublicKey), publicKey)
}

// GetOrder mocks base method.
func (m *MockDatastore) GetOrder(orderID go_uuid.UUID) (*Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", orderID)
	ret0, _ := ret[0].(*Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockDatastoreMockRecorder) GetOrder(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockDatastore)(nil).GetOrder), orderID)
}

// GetPreClaim mocks base method.
func (m *MockDatastore) GetPreClaim(promotionID go_uuid.UUID, walletID string) (*Claim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreClaim", promotionID, walletID)
	ret0, _ := ret[0].(*Claim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreClaim indicates an expected call of GetPreClaim.
func (mr *MockDatastoreMockRecorder) GetPreClaim(promotionID, walletID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreClaim", reflect.TypeOf((*MockDatastore)(nil).GetPreClaim), promotionID, walletID)
}

// GetPromotion mocks base method.
func (m *MockDatastore) GetPromotion(promotionID go_uuid.UUID) (*Promotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPromotion", promotionID)
	ret0, _ := ret[0].(*Promotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPromotion indicates an expected call of GetPromotion.
func (mr *MockDatastoreMockRecorder) GetPromotion(promotionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromotion", reflect.TypeOf((*MockDatastore)(nil).GetPromotion), promotionID)
}

// GetPromotionsMissingIssuer mocks base method.
func (m *MockDatastore) GetPromotionsMissingIssuer(limit int) ([]go_uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPromotionsMissingIssuer", limit)
	ret0, _ := ret[0].([]go_uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPromotionsMissingIssuer indicates an expected call of GetPromotionsMissingIssuer.
func (mr *MockDatastoreMockRecorder) GetPromotionsMissingIssuer(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromotionsMissingIssuer", reflect.TypeOf((*MockDatastore)(nil).GetPromotionsMissingIssuer), limit)
}

// GetSumForTransactions mocks base method.
func (m *MockDatastore) GetSumForTransactions(orderID go_uuid.UUID) (decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSumForTransactions", orderID)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSumForTransactions indicates an expected call of GetSumForTransactions.
func (mr *MockDatastoreMockRecorder) GetSumForTransactions(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSumForTransactions", reflect.TypeOf((*MockDatastore)(nil).GetSumForTransactions), orderID)
}

// GetWithdrawalsAssociated mocks base method.
func (m *MockDatastore) GetWithdrawalsAssociated(walletID, claimID *go_uuid.UUID) (*go_uuid.UUID, decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawalsAssociated", walletID, claimID)
	ret0, _ := ret[0].(*go_uuid.UUID)
	ret1, _ := ret[1].(decimal.Decimal)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWithdrawalsAssociated indicates an expected call of GetWithdrawalsAssociated.
func (mr *MockDatastoreMockRecorder) GetWithdrawalsAssociated(walletID, claimID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalsAssociated", reflect.TypeOf((*MockDatastore)(nil).GetWithdrawalsAssociated), walletID, claimID)
}

// InsertBAPReportEvent mocks base method.
func (m *MockDatastore) InsertBAPReportEvent(ctx context.Context, paymentID go_uuid.UUID, amount decimal.Decimal) (*go_uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBAPReportEvent", ctx, paymentID, amount)
	ret0, _ := ret[0].(*go_uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertBAPReportEvent indicates an expected call of InsertBAPReportEvent.
func (mr *MockDatastoreMockRecorder) InsertBAPReportEvent(ctx, paymentID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBAPReportEvent", reflect.TypeOf((*MockDatastore)(nil).InsertBAPReportEvent), ctx, paymentID, amount)
}

// InsertBATLossEvent mocks base method.
func (m *MockDatastore) InsertBATLossEvent(ctx context.Context, paymentID go_uuid.UUID, reportID int, amount decimal.Decimal, platform string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBATLossEvent", ctx, paymentID, reportID, amount, platform)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertBATLossEvent indicates an expected call of InsertBATLossEvent.
func (mr *MockDatastoreMockRecorder) InsertBATLossEvent(ctx, paymentID, reportID, amount, platform interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBATLossEvent", reflect.TypeOf((*MockDatastore)(nil).InsertBATLossEvent), ctx, paymentID, reportID, amount, platform)
}

// InsertClobberedClaims mocks base method.
func (m *MockDatastore) InsertClobberedClaims(ctx context.Context, ids []go_uuid.UUID, version int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertClobberedClaims", ctx, ids, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertClobberedClaims indicates an expected call of InsertClobberedClaims.
func (mr *MockDatastoreMockRecorder) InsertClobberedClaims(ctx, ids, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertClobberedClaims", reflect.TypeOf((*MockDatastore)(nil).InsertClobberedClaims), ctx, ids, version)
}

// InsertIssuer mocks base method.
func (m *MockDatastore) InsertIssuer(issuer *Issuer) (*Issuer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIssuer", issuer)
	ret0, _ := ret[0].(*Issuer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIssuer indicates an expected call of InsertIssuer.
func (mr *MockDatastoreMockRecorder) InsertIssuer(issuer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIssuer", reflect.TypeOf((*MockDatastore)(nil).InsertIssuer), issuer)
}

// InsertSuggestion mocks base method.
func (m *MockDatastore) InsertSuggestion(credentials []cbr.CredentialRedemption, suggestionText string, suggestion []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSuggestion", credentials, suggestionText, suggestion)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertSuggestion indicates an expected call of InsertSuggestion.
func (mr *MockDatastoreMockRecorder) InsertSuggestion(credentials, suggestionText, suggestion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSuggestion", reflect.TypeOf((*MockDatastore)(nil).InsertSuggestion), credentials, suggestionText, suggestion)
}

// Migrate mocks base method.
func (m *MockDatastore) Migrate(arg0 ...uint) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Migrate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Migrate indicates an expected call of Migrate.
func (mr *MockDatastoreMockRecorder) Migrate(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockDatastore)(nil).Migrate), arg0...)
}

// NewMigrate mocks base method.
func (m *MockDatastore) NewMigrate() (*v4.Migrate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewMigrate")
	ret0, _ := ret[0].(*v4.Migrate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewMigrate indicates an expected call of NewMigrate.
func (mr *MockDatastoreMockRecorder) NewMigrate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMigrate", reflect.TypeOf((*MockDatastore)(nil).NewMigrate))
}

// RawDB mocks base method.
func (m *MockDatastore) RawDB() *sqlx.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawDB")
	ret0, _ := ret[0].(*sqlx.DB)
	return ret0
}

// RawDB indicates an expected call of RawDB.
func (mr *MockDatastoreMockRecorder) RawDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawDB", reflect.TypeOf((*MockDatastore)(nil).RawDB))
}

// RollbackTx mocks base method.
func (m *MockDatastore) RollbackTx(tx *sqlx.Tx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RollbackTx", tx)
}

// RollbackTx indicates an expected call of RollbackTx.
func (mr *MockDatastoreMockRecorder) RollbackTx(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTx", reflect.TypeOf((*MockDatastore)(nil).RollbackTx), tx)
}

// RollbackTxAndHandle mocks base method.
func (m *MockDatastore) RollbackTxAndHandle(tx *sqlx.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTxAndHandle", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackTxAndHandle indicates an expected call of RollbackTxAndHandle.
func (mr *MockDatastoreMockRecorder) RollbackTxAndHandle(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTxAndHandle", reflect.TypeOf((*MockDatastore)(nil).RollbackTxAndHandle), tx)
}

// RunNextClaimJob mocks base method.
func (m *MockDatastore) RunNextClaimJob(ctx context.Context, worker ClaimWorker) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunNextClaimJob", ctx, worker)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunNextClaimJob indicates an expected call of RunNextClaimJob.
func (mr *MockDatastoreMockRecorder) RunNextClaimJob(ctx, worker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunNextClaimJob", reflect.TypeOf((*MockDatastore)(nil).RunNextClaimJob), ctx, worker)
}

// RunNextSuggestionJob mocks base method.
func (m *MockDatastore) RunNextSuggestionJob(ctx context.Context, worker SuggestionWorker) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunNextSuggestionJob", ctx, worker)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunNextSuggestionJob indicates an expected call of RunNextSuggestionJob.
func (mr *MockDatastoreMockRecorder) RunNextSuggestionJob(ctx, worker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunNextSuggestionJob", reflect.TypeOf((*MockDatastore)(nil).RunNextSuggestionJob), ctx, worker)
}

// SaveClaimCreds mocks base method.
func (m *MockDatastore) SaveClaimCreds(claimCreds *ClaimCreds) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveClaimCreds", claimCreds)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveClaimCreds indicates an expected call of SaveClaimCreds.
func (mr *MockDatastoreMockRecorder) SaveClaimCreds(claimCreds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveClaimCreds", reflect.TypeOf((*MockDatastore)(nil).SaveClaimCreds), claimCreds)
}

// UpdateOrder mocks base method.
func (m *MockDatastore) UpdateOrder(orderID go_uuid.UUID, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", orderID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockDatastoreMockRecorder) UpdateOrder(orderID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockDatastore)(nil).UpdateOrder), orderID, status)
}

// MockReadOnlyDatastore is a mock of ReadOnlyDatastore interface.
type MockReadOnlyDatastore struct {
	ctrl     *gomock.Controller
	recorder *MockReadOnlyDatastoreMockRecorder
}

// MockReadOnlyDatastoreMockRecorder is the mock recorder for MockReadOnlyDatastore.
type MockReadOnlyDatastoreMockRecorder struct {
	mock *MockReadOnlyDatastore
}

// NewMockReadOnlyDatastore creates a new mock instance.
func NewMockReadOnlyDatastore(ctrl *gomock.Controller) *MockReadOnlyDatastore {
	mock := &MockReadOnlyDatastore{ctrl: ctrl}
	mock.recorder = &MockReadOnlyDatastoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadOnlyDatastore) EXPECT() *MockReadOnlyDatastoreMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockReadOnlyDatastore) BeginTx() (*sqlx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx")
	ret0, _ := ret[0].(*sqlx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockReadOnlyDatastoreMockRecorder) BeginTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockReadOnlyDatastore)(nil).BeginTx))
}

// GetAvailablePromotions mocks base method.
func (m *MockReadOnlyDatastore) GetAvailablePromotions(platform string) ([]Promotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailablePromotions", platform)
	ret0, _ := ret[0].([]Promotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailablePromotions indicates an expected call of GetAvailablePromotions.
func (mr *MockReadOnlyDatastoreMockRecorder) GetAvailablePromotions(platform interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailablePromotions", reflect.TypeOf((*MockReadOnlyDatastore)(nil).GetAvailablePromotions), platform)
}

// GetAvailablePromotionsForWallet mocks base method.
func (m *MockReadOnlyDatastore) GetAvailablePromotionsForWallet(wallet *wallet.Info, platform string) ([]Promotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailablePromotionsForWallet", wallet, platform)
	ret0, _ := ret[0].([]Promotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailablePromotionsForWallet indicates an expected call of GetAvailablePromotionsForWallet.
func (mr *MockReadOnlyDatastoreMockRecorder) GetAvailablePromotionsForWallet(wallet, platform interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailablePromotionsForWallet", reflect.TypeOf((*MockReadOnlyDatastore)(nil).GetAvailablePromotionsForWallet), wallet, platform)
}

// GetClaimByWalletAndPromotion mocks base method.
func (m *MockReadOnlyDatastore) GetClaimByWalletAndPromotion(wallet *wallet.Info, promotionID *Promotion) (*Claim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaimByWalletAndPromotion", wallet, promotionID)
	ret0, _ := ret[0].(*Claim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClaimByWalletAndPromotion indicates an expected call of GetClaimByWalletAndPromotion.
func (mr *MockReadOnlyDatastoreMockRecorder) GetClaimByWalletAndPromotion(wallet, promotionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaimByWalletAndPromotion", reflect.TypeOf((*MockReadOnlyDatastore)(nil).GetClaimByWalletAndPromotion), wallet, promotionID)
}

// GetClaimCreds mocks base method.
func (m *MockReadOnlyDatastore) GetClaimCreds(claimID go_uuid.UUID) (*ClaimCreds, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaimCreds", claimID)
	ret0, _ := ret[0].(*ClaimCreds)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClaimCreds indicates an expected call of GetClaimCreds.
func (mr *MockReadOnlyDatastoreMockRecorder) GetClaimCreds(claimID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaimCreds", reflect.TypeOf((*MockReadOnlyDatastore)(nil).GetClaimCreds), claimID)
}

// GetClaimSummary mocks base method.
func (m *MockReadOnlyDatastore) GetClaimSummary(walletID go_uuid.UUID, grantType string) (*ClaimSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaimSummary", walletID, grantType)
	ret0, _ := ret[0].(*ClaimSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClaimSummary indicates an expected call of GetClaimSummary.
func (mr *MockReadOnlyDatastoreMockRecorder) GetClaimSummary(walletID, grantType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaimSummary", reflect.TypeOf((*MockReadOnlyDatastore)(nil).GetClaimSummary), walletID, grantType)
}

// GetIssuer mocks base method.
func (m *MockReadOnlyDatastore) GetIssuer(promotionID go_uuid.UUID, cohort string) (*Issuer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuer", promotionID, cohort)
	ret0, _ := ret[0].(*Issuer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssuer indicates an expected call of GetIssuer.
func (mr *MockReadOnlyDatastoreMockRecorder) GetIssuer(promotionID, cohort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuer", reflect.TypeOf((*MockReadOnlyDatastore)(nil).GetIssuer), promotionID, cohort)
}

// GetIssuerByPublicKey mocks base method.
func (m *MockReadOnlyDatastore) GetIssuerByPublicKey(publicKey string) (*Issuer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuerByPublicKey", publicKey)
	ret0, _ := ret[0].(*Issuer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssuerByPublicKey indicates an expected call of GetIssuerByPublicKey.
func (mr *MockReadOnlyDatastoreMockRecorder) GetIssuerByPublicKey(publicKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuerByPublicKey", reflect.TypeOf((*MockReadOnlyDatastore)(nil).GetIssuerByPublicKey), publicKey)
}

// GetPreClaim mocks base method.
func (m *MockReadOnlyDatastore) GetPreClaim(promotionID go_uuid.UUID, walletID string) (*Claim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreClaim", promotionID, walletID)
	ret0, _ := ret[0].(*Claim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreClaim indicates an expected call of GetPreClaim.
func (mr *MockReadOnlyDatastoreMockRecorder) GetPreClaim(promotionID, walletID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreClaim", reflect.TypeOf((*MockReadOnlyDatastore)(nil).GetPreClaim), promotionID, walletID)
}

// GetPromotion mocks base method.
func (m *MockReadOnlyDatastore) GetPromotion(promotionID go_uuid.UUID) (*Promotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPromotion", promotionID)
	ret0, _ := ret[0].(*Promotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPromotion indicates an expected call of GetPromotion.
func (mr *MockReadOnlyDatastoreMockRecorder) GetPromotion(promotionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromotion", reflect.TypeOf((*MockReadOnlyDatastore)(nil).GetPromotion), promotionID)
}

// GetPromotionsMissingIssuer mocks base method.
func (m *MockReadOnlyDatastore) GetPromotionsMissingIssuer(limit int) ([]go_uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPromotionsMissingIssuer", limit)
	ret0, _ := ret[0].([]go_uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPromotionsMissingIssuer indicates an expected call of GetPromotionsMissingIssuer.
func (mr *MockReadOnlyDatastoreMockRecorder) GetPromotionsMissingIssuer(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromotionsMissingIssuer", reflect.TypeOf((*MockReadOnlyDatastore)(nil).GetPromotionsMissingIssuer), limit)
}

// GetWithdrawalsAssociated mocks base method.
func (m *MockReadOnlyDatastore) GetWithdrawalsAssociated(walletID, claimID *go_uuid.UUID) (*go_uuid.UUID, decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawalsAssociated", walletID, claimID)
	ret0, _ := ret[0].(*go_uuid.UUID)
	ret1, _ := ret[1].(decimal.Decimal)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWithdrawalsAssociated indicates an expected call of GetWithdrawalsAssociated.
func (mr *MockReadOnlyDatastoreMockRecorder) GetWithdrawalsAssociated(walletID, claimID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalsAssociated", reflect.TypeOf((*MockReadOnlyDatastore)(nil).GetWithdrawalsAssociated), walletID, claimID)
}

// Migrate mocks base method.
func (m *MockReadOnlyDatastore) Migrate(arg0 ...uint) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Migrate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Migrate indicates an expected call of Migrate.
func (mr *MockReadOnlyDatastoreMockRecorder) Migrate(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockReadOnlyDatastore)(nil).Migrate), arg0...)
}

// NewMigrate mocks base method.
func (m *MockReadOnlyDatastore) NewMigrate() (*v4.Migrate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewMigrate")
	ret0, _ := ret[0].(*v4.Migrate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewMigrate indicates an expected call of NewMigrate.
func (mr *MockReadOnlyDatastoreMockRecorder) NewMigrate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMigrate", reflect.TypeOf((*MockReadOnlyDatastore)(nil).NewMigrate))
}

// RawDB mocks base method.
func (m *MockReadOnlyDatastore) RawDB() *sqlx.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawDB")
	ret0, _ := ret[0].(*sqlx.DB)
	return ret0
}

// RawDB indicates an expected call of RawDB.
func (mr *MockReadOnlyDatastoreMockRecorder) RawDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawDB", reflect.TypeOf((*MockReadOnlyDatastore)(nil).RawDB))
}

// RollbackTx mocks base method.
func (m *MockReadOnlyDatastore) RollbackTx(tx *sqlx.Tx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RollbackTx", tx)
}

// RollbackTx indicates an expected call of RollbackTx.
func (mr *MockReadOnlyDatastoreMockRecorder) RollbackTx(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTx", reflect.TypeOf((*MockReadOnlyDatastore)(nil).RollbackTx), tx)
}

// RollbackTxAndHandle mocks base method.
func (m *MockReadOnlyDatastore) RollbackTxAndHandle(tx *sqlx.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTxAndHandle", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackTxAndHandle indicates an expected call of RollbackTxAndHandle.
func (mr *MockReadOnlyDatastoreMockRecorder) RollbackTxAndHandle(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTxAndHandle", reflect.TypeOf((*MockReadOnlyDatastore)(nil).RollbackTxAndHandle), tx)
}
