// Code generated by MockGen. DO NOT EDIT.
// Source: ./utils/clients/payment/client.go

// Package mockpayment is a generated GoMock package.
package mockpayment

import (
	context "context"
	reflect "reflect"

	payment "github.com/brave-intl/bat-go/utils/clients/payment"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Prepare mocks base method.
func (m *MockClient) Prepare(ctx context.Context, transactions []payment.Transaction) (*[]payment.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepare", ctx, transactions)
	ret0, _ := ret[0].(*[]payment.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare.
func (mr *MockClientMockRecorder) Prepare(ctx, transactions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockClient)(nil).Prepare), ctx, transactions)
}

// Status mocks base method.
func (m *MockClient) Status(ctx context.Context, documentID string) (*payment.TransactionStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", ctx, documentID)
	ret0, _ := ret[0].(*payment.TransactionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockClientMockRecorder) Status(ctx, documentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockClient)(nil).Status), ctx, documentID)
}

// Submit mocks base method.
func (m *MockClient) Submit(ctx context.Context, transactions []payment.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Submit", ctx, transactions)
	ret0, _ := ret[0].(error)
	return ret0
}

// Submit indicates an expected call of Submit.
func (mr *MockClientMockRecorder) Submit(ctx, transactions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Submit", reflect.TypeOf((*MockClient)(nil).Submit), ctx, transactions)
}
