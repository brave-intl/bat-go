// Code generated by MockGen. DO NOT EDIT.
// Source: ./utils/clients/etherscan/client.go

// Package mock_etherscan is a generated GoMock package.
package mock_etherscan

import (
	context "context"
	reflect "reflect"
	time "time"

	etherscan "github.com/brave-intl/bat-go/utils/clients/etherscan"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// FetchGasOracle mocks base method.
func (m *MockClient) FetchGasOracle(ctx context.Context) (*etherscan.GasOracleResponse, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchGasOracle", ctx)
	ret0, _ := ret[0].(*etherscan.GasOracleResponse)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchGasOracle indicates an expected call of FetchGasOracle.
func (mr *MockClientMockRecorder) FetchGasOracle(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchGasOracle", reflect.TypeOf((*MockClient)(nil).FetchGasOracle), ctx)
}
