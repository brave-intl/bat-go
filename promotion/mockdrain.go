// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/brave-intl/bat-go/promotion (interfaces: DrainWorker)

// Package mock_promotion is a generated GoMock package.
package promotion

import (
	context "context"
	cbr "github.com/brave-intl/bat-go/utils/clients/cbr"
	wallet "github.com/brave-intl/bat-go/wallet"
	gomock "github.com/golang/mock/gomock"
	go_uuid "github.com/satori/go.uuid"
	decimal "github.com/shopspring/decimal"
	reflect "reflect"
)

// MockDrainWorker is a mock of DrainWorker interface
type MockDrainWorker struct {
	ctrl     *gomock.Controller
	recorder *MockDrainWorkerMockRecorder
}

// MockDrainWorkerMockRecorder is the mock recorder for MockDrainWorker
type MockDrainWorkerMockRecorder struct {
	mock *MockDrainWorker
}

// NewMockDrainWorker creates a new mock instance
func NewMockDrainWorker(ctrl *gomock.Controller) *MockDrainWorker {
	mock := &MockDrainWorker{ctrl: ctrl}
	mock.recorder = &MockDrainWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDrainWorker) EXPECT() *MockDrainWorkerMockRecorder {
	return m.recorder
}

// RedeemAndTransferFunds mocks base method
func (m *MockDrainWorker) RedeemAndTransferFunds(arg0 context.Context, arg1 []cbr.CredentialRedemption, arg2 go_uuid.UUID, arg3 decimal.Decimal) (*wallet.TransactionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RedeemAndTransferFunds", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*wallet.TransactionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RedeemAndTransferFunds indicates an expected call of RedeemAndTransferFunds
func (mr *MockDrainWorkerMockRecorder) RedeemAndTransferFunds(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedeemAndTransferFunds", reflect.TypeOf((*MockDrainWorker)(nil).RedeemAndTransferFunds), arg0, arg1, arg2, arg3)
}
