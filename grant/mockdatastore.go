// Code generated by MockGen. DO NOT EDIT.
// Source: grant/datastore.go

package grant

import (
	reflect "reflect"

	promotion "github.com/brave-intl/bat-go/promotion"
	wallet "github.com/brave-intl/bat-go/wallet"
	gomock "github.com/golang/mock/gomock"
	go_uuid "github.com/satori/go.uuid"
)

// MockDatastore is a mock of Datastore interface
type MockDatastore struct {
	ctrl     *gomock.Controller
	recorder *MockDatastoreMockRecorder
}

// MockDatastoreMockRecorder is the mock recorder for MockDatastore
type MockDatastoreMockRecorder struct {
	mock *MockDatastore
}

// NewMockDatastore creates a new mock instance
func NewMockDatastore(ctrl *gomock.Controller) *MockDatastore {
	mock := &MockDatastore{ctrl: ctrl}
	mock.recorder = &MockDatastoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatastore) EXPECT() *MockDatastoreMockRecorder {
	return m.recorder
}

// UpsertWallet mocks base method
func (m *MockDatastore) UpsertWallet(wallet *wallet.Info) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertWallet", wallet)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertWallet indicates an expected call of UpsertWallet
func (mr *MockDatastoreMockRecorder) UpsertWallet(wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertWallet", reflect.TypeOf((*MockDatastore)(nil).UpsertWallet), wallet)
}

// GetClaimantProviderID mocks base method
func (m *MockDatastore) GetClaimantProviderID(grant Grant) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaimantProviderID", grant)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClaimantProviderID indicates an expected call of GetClaimantProviderID
func (mr *MockDatastoreMockRecorder) GetClaimantProviderID(grant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaimantProviderID", reflect.TypeOf((*MockDatastore)(nil).GetClaimantProviderID), grant)
}

// RedeemGrantForWallet mocks base method
func (m *MockDatastore) RedeemGrantForWallet(grant Grant, wallet wallet.Info) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RedeemGrantForWallet", grant, wallet)
	ret0, _ := ret[0].(error)
	return ret0
}

// RedeemGrantForWallet indicates an expected call of RedeemGrantForWallet
func (mr *MockDatastoreMockRecorder) RedeemGrantForWallet(grant, wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedeemGrantForWallet", reflect.TypeOf((*MockDatastore)(nil).RedeemGrantForWallet), grant, wallet)
}

// ClaimGrantForWallet mocks base method
func (m *MockDatastore) ClaimGrantForWallet(grant Grant, wallet wallet.Info) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClaimGrantForWallet", grant, wallet)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClaimGrantForWallet indicates an expected call of ClaimGrantForWallet
func (mr *MockDatastoreMockRecorder) ClaimGrantForWallet(grant, wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClaimGrantForWallet", reflect.TypeOf((*MockDatastore)(nil).ClaimGrantForWallet), grant, wallet)
}

// HasGrantBeenRedeemed mocks base method
func (m *MockDatastore) HasGrantBeenRedeemed(grant Grant) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasGrantBeenRedeemed", grant)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasGrantBeenRedeemed indicates an expected call of HasGrantBeenRedeemed
func (mr *MockDatastoreMockRecorder) HasGrantBeenRedeemed(grant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasGrantBeenRedeemed", reflect.TypeOf((*MockDatastore)(nil).HasGrantBeenRedeemed), grant)
}

// GetGrantsOrderedByExpiry mocks base method
func (m *MockDatastore) GetGrantsOrderedByExpiry(wallet wallet.Info) ([]Grant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGrantsOrderedByExpiry", wallet)
	ret0, _ := ret[0].([]Grant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGrantsOrderedByExpiry indicates an expected call of GetGrantsOrderedByExpiry
func (mr *MockDatastoreMockRecorder) GetGrantsOrderedByExpiry(wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGrantsOrderedByExpiry", reflect.TypeOf((*MockDatastore)(nil).GetGrantsOrderedByExpiry), wallet)
}

// ClaimPromotionForWallet mocks base method
func (m *MockDatastore) ClaimPromotionForWallet(promo *promotion.Promotion, wallet *wallet.Info) (*promotion.Claim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClaimPromotionForWallet", promo, wallet)
	ret0, _ := ret[0].(*promotion.Claim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClaimPromotionForWallet indicates an expected call of ClaimPromotionForWallet
func (mr *MockDatastoreMockRecorder) ClaimPromotionForWallet(promotion, wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClaimPromotionForWallet", reflect.TypeOf((*MockDatastore)(nil).ClaimPromotionForWallet), promotion, wallet)
}

// GetPromotion mocks base method
func (m *MockDatastore) GetPromotion(promotionID go_uuid.UUID) (*promotion.Promotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPromotion", promotionID)
	ret0, _ := ret[0].(*promotion.Promotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPromotion indicates an expected call of GetPromotion
func (mr *MockDatastoreMockRecorder) GetPromotion(promotionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromotion", reflect.TypeOf((*MockDatastore)(nil).GetPromotion), promotionID)
}
