// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/brave-intl/bat-go/grant (interfaces: Datastore)

// Package grant is a generated GoMock package.
package grant

import (
	reflect "reflect"

<<<<<<< HEAD
	wallet "github.com/brave-intl/bat-go/wallet"
	migrate "github.com/golang-migrate/migrate/v4"
=======
	promotion "github.com/brave-intl/bat-go/promotion"
	wallet "github.com/brave-intl/bat-go/utils/wallet"
>>>>>>> add wallet endpoints
	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockDatastore is a mock of Datastore interface
type MockDatastore struct {
	ctrl     *gomock.Controller
	recorder *MockDatastoreMockRecorder
}

// MockDatastoreMockRecorder is the mock recorder for MockDatastore
type MockDatastoreMockRecorder struct {
	mock *MockDatastore
}

// NewMockDatastore creates a new mock instance
func NewMockDatastore(ctrl *gomock.Controller) *MockDatastore {
	mock := &MockDatastore{ctrl: ctrl}
	mock.recorder = &MockDatastoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatastore) EXPECT() *MockDatastoreMockRecorder {
	return m.recorder
}

// GetGrantsOrderedByExpiry mocks base method
func (m *MockDatastore) GetGrantsOrderedByExpiry(arg0 wallet.Info, arg1 string) ([]Grant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGrantsOrderedByExpiry", arg0, arg1)
	ret0, _ := ret[0].([]Grant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGrantsOrderedByExpiry indicates an expected call of GetGrantsOrderedByExpiry
func (mr *MockDatastoreMockRecorder) GetGrantsOrderedByExpiry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGrantsOrderedByExpiry", reflect.TypeOf((*MockDatastore)(nil).GetGrantsOrderedByExpiry), arg0, arg1)
}

// Migrate mocks base method
func (m *MockDatastore) Migrate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migrate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Migrate indicates an expected call of Migrate
func (mr *MockDatastoreMockRecorder) Migrate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockDatastore)(nil).Migrate))
}

// NewMigrate mocks base method
func (m *MockDatastore) NewMigrate() (*migrate.Migrate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewMigrate")
	ret0, _ := ret[0].(*migrate.Migrate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewMigrate indicates an expected call of NewMigrate
func (mr *MockDatastoreMockRecorder) NewMigrate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMigrate", reflect.TypeOf((*MockDatastore)(nil).NewMigrate))
}

// RawDB mocks base method
func (m *MockDatastore) RawDB() *sqlx.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawDB")
	ret0, _ := ret[0].(*sqlx.DB)
	return ret0
}

// RawDB indicates an expected call of RawDB
func (mr *MockDatastoreMockRecorder) RawDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawDB", reflect.TypeOf((*MockDatastore)(nil).RawDB))
}

// RollbackTx mocks base method
func (m *MockDatastore) RollbackTx(arg0 *sqlx.Tx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RollbackTx", arg0)
}

// RollbackTx indicates an expected call of RollbackTx
func (mr *MockDatastoreMockRecorder) RollbackTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTx", reflect.TypeOf((*MockDatastore)(nil).RollbackTx), arg0)
}
