name: CI

on:
  pull_request:

env:
  GO111MODULE: on
  GOTOOLCHAIN: local
  TEST_TAGS: integration
  DATABASE_MIGRATIONS_URL: file://$(pwd)/migrations
  GEMINI_SUBMIT_TYPE: hmac
  BAT_SETTLEMENT_ADDRESS: ${{secrets.BAT_SETTLEMENT_ADDRESS}}
  DONOR_WALLET_CARD_ID: ${{secrets.DONOR_WALLET_CARD_ID}}
  DONOR_WALLET_PRIVATE_KEY: ${{secrets.DONOR_WALLET_PRIVATE_KEY}}
  DONOR_WALLET_PUBLIC_KEY: ${{secrets.DONOR_WALLET_PUBLIC_KEY}}
  ENCRYPTION_KEY: ${{secrets.ENCRYPTION_KEY}}
  GEMINI_API_KEY: ${{secrets.GEMINI_API_KEY}}
  GEMINI_API_SECRET: ${{secrets.GEMINI_API_KEY}}
  GEMINI_BROWSER_CLIENT_ID: ${{secrets.GEMINI_BROWSER_CLIENT_ID}}
  GEMINI_CLIENT_ID: ${{secrets.GEMINI_CLIENT_ID}}
  GEMINI_CLIENT_SECRET: ${{secrets.GEMINI_CLIENT_SECRET}}
  GEMINI_SERVER: ${{secrets.GEMINI_SERVER}}
  GEMINI_TEST_DESTINATION_ID: ${{secrets.GEMINI_TEST_DESTINATION_ID}}
  GRANT_WALLET_CARD_ID: ${{secrets.GRANT_WALLET_CARD_ID}}
  GRANT_WALLET_PRIVATE_KEY: ${{secrets.GRANT_WALLET_PRIVATE_KEY}}
  GRANT_WALLET_PUBLIC_KEY: ${{secrets.GRANT_WALLET_PUBLIC_KEY}}
  UPHOLD_ACCESS_TOKEN: ${{secrets.UPHOLD_ACCESS_TOKEN}}
  RATIOS_TOKEN: ${{secrets.RATIOS_TOKEN}}
  UPHOLD_SETTLEMENT_ADDRESS: ${{secrets.UPHOLD_SETTLEMENT_ADDRESS}}
  BITFLYER_SOURCE_FROM: tipping
  BITFLYER_CLIENT_ID: ${{secrets.BITFLYER_CLIENT_ID}}
  BITFLYER_CLIENT_SECRET: ${{secrets.BITFLYER_CLIENT_SECRET}}
  BITFLYER_EXTRA_CLIENT_SECRET: ${{secrets.BITFLYER_EXTRA_CLIENT_SECRET}}
  BITFLYER_SERVER: ${{secrets.BITFLYER_SERVER}}
  BITFLYER_TOKEN: ${{secrets.BITFLYER_TOKEN}}
  REDIS_ADDR: redis://grant-redis/

jobs:
  CI:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        goversion:
        - 1.23

    steps:
    - name: Checkout repository
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838 # v5.0.0
      with:
        role-to-assume: ${{ secrets.GRANT_CI_IAM_ROLE_ARN }}
        aws-region: us-west-2

    - name: Login to Challenge-Bypass Amazon ECR Private
      id: grant-login-ecr
      uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1

    - name: Login to Docker Hub
      uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up Go
      id: setup-go
      uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
      with:
        go-version: 1.25
        cache-dependency-path: "**/go.sum"

    - run: docker compose pull

    - name: Start Vault
      run: |
        docker compose -f docker-compose.yml -f docker-compose.dev.yml up -d vault;
        sleep 3

    - name: Run Tests
      run: |
        export VAULT_TOKEN=$(docker logs grant-vault 2>&1 | grep "Root Token" | tail -1 | cut -d ' ' -f 3 );
        export GOMODCACHE=$(go env GOMODCACHE)
        docker compose -f docker-compose.yml -f docker-compose.dev.yml run --rm -v $GOMODCACHE:/go/pkg/mod dev make

