name: CI

on:
  push:
    branches:
      - master
      - prod
      - dev
  pull_request:
    branches:
      - master
      - prod

env:
  GO111MODULE: on
  TEST_TAGS: integration
  DATABASE_MIGRATIONS_URL: file://$(pwd)/migrations
  UPHOLD_ACCESS_TOKEN: ${{secrets.UPHOLD_ACCESS_TOKEN}}
  BAT_SETTLEMENT_ADDRESS: ${{secrets.BAT_SETTLEMENT_ADDRESS}}
  GRANT_WALLET_PUBLIC_KEY: ${{secrets.GRANT_WALLET_PUBLIC_KEY}}
  GRANT_WALLET_PRIVATE_KEY: ${{secrets.GRANT_WALLET_PRIVATE_KEY}}
  GRANT_WALLET_CARD_ID: ${{secrets.GRANT_WALLET_CARD_ID}}
  UPHOLD_SETTLEMENT_ADDRESS: ${{secrets.UPHOLD_SETTLEMENT_ADDRESS}}
  GEMINI_SERVER: ${{secrets.GEMINI_SERVER}}
  GEMINI_CLIENT_KEY: ${{secrets.GEMINI_CLIENT_KEY}}
  GEMINI_CLIENT_SECRET: ${{secrets.GEMINI_CLIENT_SECRET}}
  GEMINI_CLIENT_ID: ${{secrets.GEMINI_CLIENT_ID}}
  GEMINI_TEST_DESTINATION_ID: ${{secrets.GEMINI_TEST_DESTINATION_ID}}
  RATIOS_TOKEN: ${{secrets.RATIOS_TOKEN}}

jobs:
  CI:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goversion:
        - 1.14
        - 1.15
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ${{matrix.goversion}}

    - name: Docker Compose Install
      uses: KengoTODA/actions-setup-docker-compose@main
      with:
        version: '1.25.4'

    - uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - run: docker-compose pull
    - uses: satackey/action-docker-layer-caching@v0.0.8
      # Ignore the failure of a step and avoid terminating the job.
      continue-on-error: true
      with:
        key: docker-cache-{hash}
        restore-keys: |
          docker-cache-

    - name: Get dependencies
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/v1.26.0/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.26.0;
        go mod download;

    - name: Lint
      run: make lint

    - name: Vault
      run: |
        docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d vault;
        sleep 3;

    - name: Test
      run: |
        export VAULT_TOKEN=$(docker logs grant-vault 2>&1 | grep "Root Token" | tail -1 | cut -d ' ' -f 3 );
        docker-compose -f docker-compose.yml -f docker-compose.dev.yml run --rm dev make;
