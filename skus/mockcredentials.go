// Code generated by MockGen. DO NOT EDIT.
// Source: ./skus/credentials.go

// Package skus is a generated GoMock package.
package skus

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	go_uuid "github.com/satori/go.uuid"
	kafka_go "github.com/segmentio/kafka-go"
)

// MockOrderWorker is a mock of OrderWorker interface.
type MockOrderWorker struct {
	ctrl     *gomock.Controller
	recorder *MockOrderWorkerMockRecorder
}

// MockOrderWorkerMockRecorder is the mock recorder for MockOrderWorker.
type MockOrderWorkerMockRecorder struct {
	mock *MockOrderWorker
}

// NewMockOrderWorker creates a new mock instance.
func NewMockOrderWorker(ctrl *gomock.Controller) *MockOrderWorker {
	mock := &MockOrderWorker{ctrl: ctrl}
	mock.recorder = &MockOrderWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderWorker) EXPECT() *MockOrderWorkerMockRecorder {
	return m.recorder
}

// SignOrderCreds mocks base method.
func (m *MockOrderWorker) SignOrderCreds(ctx context.Context, orderID go_uuid.UUID, issuer Issuer, blindedCreds []string) (*OrderCreds, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignOrderCreds", ctx, orderID, issuer, blindedCreds)
	ret0, _ := ret[0].(*OrderCreds)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignOrderCreds indicates an expected call of SignOrderCreds.
func (mr *MockOrderWorkerMockRecorder) SignOrderCreds(ctx, orderID, issuer, blindedCreds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignOrderCreds", reflect.TypeOf((*MockOrderWorker)(nil).SignOrderCreds), ctx, orderID, issuer, blindedCreds)
}

// MockSigningRequestWriter is a mock of SigningRequestWriter interface.
type MockSigningRequestWriter struct {
	ctrl     *gomock.Controller
	recorder *MockSigningRequestWriterMockRecorder
}

// MockSigningRequestWriterMockRecorder is the mock recorder for MockSigningRequestWriter.
type MockSigningRequestWriterMockRecorder struct {
	mock *MockSigningRequestWriter
}

// NewMockSigningRequestWriter creates a new mock instance.
func NewMockSigningRequestWriter(ctrl *gomock.Controller) *MockSigningRequestWriter {
	mock := &MockSigningRequestWriter{ctrl: ctrl}
	mock.recorder = &MockSigningRequestWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSigningRequestWriter) EXPECT() *MockSigningRequestWriterMockRecorder {
	return m.recorder
}

// WriteMessage mocks base method.
func (m *MockSigningRequestWriter) WriteMessage(ctx context.Context, message []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMessage", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMessage indicates an expected call of WriteMessage.
func (mr *MockSigningRequestWriterMockRecorder) WriteMessage(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessage", reflect.TypeOf((*MockSigningRequestWriter)(nil).WriteMessage), ctx, message)
}

// WriteMessages mocks base method.
func (m *MockSigningRequestWriter) WriteMessages(ctx context.Context, messages []SigningOrderRequestOutbox) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMessages", ctx, messages)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMessages indicates an expected call of WriteMessages.
func (mr *MockSigningRequestWriterMockRecorder) WriteMessages(ctx, messages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessages", reflect.TypeOf((*MockSigningRequestWriter)(nil).WriteMessages), ctx, messages)
}

// MockSigningResultReader is a mock of SigningResultReader interface.
type MockSigningResultReader struct {
	ctrl     *gomock.Controller
	recorder *MockSigningResultReaderMockRecorder
}

// MockSigningResultReaderMockRecorder is the mock recorder for MockSigningResultReader.
type MockSigningResultReaderMockRecorder struct {
	mock *MockSigningResultReader
}

// NewMockSigningResultReader creates a new mock instance.
func NewMockSigningResultReader(ctrl *gomock.Controller) *MockSigningResultReader {
	mock := &MockSigningResultReader{ctrl: ctrl}
	mock.recorder = &MockSigningResultReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSigningResultReader) EXPECT() *MockSigningResultReaderMockRecorder {
	return m.recorder
}

// CommitMessages mocks base method.
func (m *MockSigningResultReader) CommitMessages(ctx context.Context, messages ...kafka_go.Message) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range messages {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommitMessages", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitMessages indicates an expected call of CommitMessages.
func (mr *MockSigningResultReaderMockRecorder) CommitMessages(ctx interface{}, messages ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, messages...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitMessages", reflect.TypeOf((*MockSigningResultReader)(nil).CommitMessages), varargs...)
}

// Decode mocks base method.
func (m *MockSigningResultReader) Decode(message kafka_go.Message) (*SigningOrderResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", message)
	ret0, _ := ret[0].(*SigningOrderResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode.
func (mr *MockSigningResultReaderMockRecorder) Decode(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockSigningResultReader)(nil).Decode), message)
}

// FetchMessage mocks base method.
func (m *MockSigningResultReader) FetchMessage(ctx context.Context) (kafka_go.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMessage", ctx)
	ret0, _ := ret[0].(kafka_go.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchMessage indicates an expected call of FetchMessage.
func (mr *MockSigningResultReaderMockRecorder) FetchMessage(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMessage", reflect.TypeOf((*MockSigningResultReader)(nil).FetchMessage), ctx)
}
